{"version":3,"sources":["Minesweeper.js","index.js"],"names":["Timer","props","useEffect","running","id","setInterval","callback","clearInterval","className","secondsElapsed","CellButton","mines","revealed","flags","current","width","height","gameState","isMine","containsCoordinate","isRevealed","isFlagged","cellNumber","adjacentIn","length","numberClass","num","numberToClass","onMouseUp","x","y","ResetButton","content","onClick","coord","coords","adjacentCoords","adjacentCells","filter","c","Coordinate","coordEq","c1","c2","target","arr","this","inclusiveReveal","concat","exclusiveReveal","newlyRevealed","push","deepReveal","Array","prototype","apply","Minesweeper","bombCount","rows","useState","setFlags","setMines","setRevealed","Date","now","startTime","setStartTime","currentTime","setCurrentTime","handleCellClick","e","preventDefault","stopPropagation","checkGameOver","button","newMines","mineCount","firstClick","potentialMines","notMines","i","randomIndex","Math","floor","random","randomElement","splice","createMines","newRevealed","adjacentFlags","adjacentMines","reduce","acc","cur","slice","chord","newFlags","flag","cells","onContextMenu","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe1445a1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Minesweeper.css';\r\n\r\nconst GAME_ONGOING = 0;\r\nconst GAME_WIN = 1;\r\nconst GAME_LOSS = 2;\r\n\r\nfunction Minesweeper(props) {\r\n  const height = props.height;\r\n  const width = props.width;\r\n  const bombCount = props.bombCount;\r\n  const rows = [];\r\n  \r\n  const [flags, setFlags] = useState([]);\r\n  const [mines, setMines] = useState([]);\r\n  const [revealed, setRevealed] = useState([]);\r\n  const [startTime, setStartTime] = useState(Date.now());\r\n  const [currentTime, setCurrentTime] = useState(Date.now());\r\n\r\n  function resetState() {\r\n    setFlags([]);\r\n    setMines([]);\r\n    setRevealed([]);\r\n    setStartTime(Date.now());\r\n    setCurrentTime(Date.now());\r\n  }\r\n  \r\n  function handleCellClick(x, y) {\r\n    return (e) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      if (checkGameOver() !== GAME_ONGOING) {\r\n\treturn;\r\n      }\r\n      const current = new Coordinate(x, y);\r\n      if (e.button === 0) {\r\n\t// Generate mines and then reveal if first click\r\n\t// Flag if unrevealed and right click\r\n\t// Unflag if unrevealed, right click and flagged\r\n\t// Reveal if unrevealed and left click\r\n\tif (mines.length === 0) {\r\n\t  const newMines = createMines(width, height, bombCount, current);\r\n\t  const newRevealed = inclusiveReveal(width, height, current, flags, newMines, revealed);\r\n\t  setMines(newMines);\r\n\t  setRevealed(newRevealed);\r\n\t  return;\r\n\t}\r\n\t\r\n\tif (containsCoordinate(current, revealed)) {\r\n\t  return;\r\n\t}\r\n\tconst newRevealed = inclusiveReveal(width, height, current, flags, mines, revealed);\r\n\tsetRevealed(newRevealed);\r\n      } else if (e.button === 1) {\r\n\tconst newRevealed = chord(width, height, current, flags, mines, revealed);\r\n\tsetRevealed(newRevealed);\r\n      } else if (e.button === 2) {\r\n\tconst newFlags = flag(current, flags, revealed);\r\n\tsetFlags(newFlags);\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkGameOver() {\r\n    for (const mine of mines) {\r\n      if (containsCoordinate(mine, revealed)) {\r\n\treturn GAME_LOSS;\r\n      }\r\n    }\r\n    if (revealed.length === (width * height - bombCount)) {\r\n      return GAME_WIN;\r\n    }\r\n    return GAME_ONGOING;\r\n  }\r\n  \r\n  const gameState = checkGameOver();\r\n\r\n  for (let y = 0; y < height; y++) {\r\n    const cells = [];\r\n    for (let x = 0; x < width; x++) {\r\n      cells.push(\r\n      <CellButton\r\n\tkey={\"\" + x + y}\r\n        current={new Coordinate(x, y)}\r\n\tmines={mines}\r\n\trevealed={revealed}\r\n\tflags={flags}\r\n\twidth={width}\r\n\theight={height}\r\n\tgameState={gameState}\r\n\tonMouseUp={handleCellClick(x, y)} />\r\n      );\r\n    }\r\n    rows.push(<div key={y} className=\"row\">{cells}</div>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"minesweeper\" onContextMenu={(e) => {e.preventDefault();e.stopPropagation();}}>\r\n      <div className=\"minesweeper-header\">\r\n        <span className=\"header-span bomb-counter\">{bombCount - flags.length}</span>\r\n        <ResetButton onClick={resetState} gameState={gameState} />\r\n        <Timer callback={() => setCurrentTime(Date.now())}\r\n               running={gameState === GAME_ONGOING} \r\n               secondsElapsed={Math.floor((currentTime - startTime) / 1000)} />\r\n      </div>\r\n      {rows}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Timer(props) {\r\n  useEffect(() => {\r\n    if (props.running) {\r\n      const id = setInterval(props.callback, 1000);\r\n      return (() => clearInterval(id));\r\n    }\r\n  }, [props.running]);\r\n\r\n  return (\r\n    <span className=\"header-span timer\">{props.secondsElapsed}</span>\r\n  );\r\n}\r\n\r\nfunction CellButton(props) {\r\n  const mines = props.mines;\r\n  const revealed = props.revealed;\r\n  const flags = props.flags;\r\n  const current = props.current;\r\n  const width = props.width;\r\n  const height = props.height;\r\n  const gameState = props.gameState;\r\n\r\n  const isMine = containsCoordinate(current, mines);\r\n  const isRevealed = containsCoordinate(current, revealed);\r\n  const isFlagged = containsCoordinate(current, flags);\r\n\r\n  if (isRevealed && !isMine) {\r\n    const cellNumber = adjacentIn(width, height, current, mines).length;\r\n    const numberClass = numberToClass(cellNumber);\r\n    return <button key={\"\" + current.x + current.y} className={\"cell-button \" + numberClass + ' revealed'} onMouseUp={props.onMouseUp}>{cellNumber > 0 ? cellNumber : ''}</button>;\r\n  } else if (isRevealed && isMine) {\r\n    return <button key={\"\" + current.x + current.y} className=\"cell-button revealed-mine\" onMouseUp={props.onMouseUp}><span className=\"cell-span\">💣</span></button>;\r\n  } else if (!isRevealed && isMine && gameState === GAME_LOSS) {\r\n    return <button key={\"\" + current.x + current.y} className=\"cell-button\" onMouseUp={props.onMouseUp}><span className=\"cell-span\">💣</span></button>;\r\n  } else if (!isRevealed && !isFlagged) {\r\n    return <button key={\"\" + current.x + current.y} className=\"cell-button\" onMouseUp={props.onMouseUp}>{\" \"}</button>;\r\n  } else if (isFlagged && !isMine && gameState === GAME_LOSS) {\r\n    return <button key={\"\" + current.x + current.y} className=\"cell-button\" onMouseUp={props.onMouseUp}><span className=\"cell-span\">❌</span></button>;\r\n  } else if (!isRevealed && isFlagged) {\r\n    return <button key={\"\" + current.x + current.y} className=\"cell-button\" onMouseUp={props.onMouseUp}><span className=\"cell-span\">🚩</span></button>;\r\n  }\r\n}\r\n\r\nfunction ResetButton(props) {\r\n  let content = \"\";\r\n  if (props.gameState === GAME_LOSS) {\r\n    content = \"😭\";\r\n  } else if (props.gameState === GAME_ONGOING) {\r\n    content = \"🙂\";\r\n  } else if (props.gameState === GAME_WIN) {\r\n    content = \"🥳\";\r\n  }\r\n\r\n  return (\r\n    <button className=\"reset-button\" onClick={props.onClick}>{content}</button>\r\n  );\r\n}\r\n\r\nfunction adjacentIn(width, height, coord, coords) {\r\n  const adjacentCoords = adjacentCells(width, height, coord);\r\n  return coords.filter(c => containsCoordinate(c, adjacentCoords));\r\n}\r\n\r\nfunction adjacentCells(width, height, coord) {\r\n  const x = coord.x;\r\n  const y = coord.y;\r\n  const candidates = [\r\n    new Coordinate(x + 1, y + 1),\r\n    new Coordinate(x + 1, y),\r\n    new Coordinate(x + 1, y - 1),\r\n    new Coordinate(x, y + 1),\r\n    new Coordinate(x, y - 1),\r\n    new Coordinate(x - 1, y + 1),\r\n    new Coordinate(x - 1, y),\r\n    new Coordinate(x - 1, y - 1)\r\n  ];\r\n  return candidates.filter(c => c.x >= 0 && c.x < width && c.y >= 0 && c.y < height);\r\n}\r\n\r\nfunction createMines(width, height, mineCount, firstClick) {\r\n  const mines = [];\r\n  let potentialMines = [];\r\n  const notMines = adjacentCells(width, height, firstClick);\r\n  notMines.push(firstClick);\r\n  \r\n  for (let x = 0; x < width; x++) {\r\n    for (let y = 0; y < height; y++) {\r\n      potentialMines.push(new Coordinate(x, y));\r\n    }\r\n  }\r\n  // First revealed cell and the cells adjacent to it should be free of mines\r\n  potentialMines = potentialMines.filter(coord => !containsCoordinate(coord, notMines));\r\n  \r\n  for (let i = 0; i < mineCount; i++) {\r\n    // Array.splice does not actually require the first argument to be an integer O,o\r\n    let randomIndex = Math.floor(Math.random() * potentialMines.length);\r\n    let randomElement = potentialMines.splice(randomIndex, 1)[0]\r\n    mines.push(randomElement);\r\n  }\r\n  return mines;\r\n}\r\n\r\nfunction coordEq(c1, c2) {\r\n  if (c1.x === c2.x && c1.y === c2.y) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction containsCoordinate(target, arr) {\r\n  for (const coord of arr) {\r\n    if (coordEq(coord, target)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction Coordinate(x, y) {\r\n  this.x = x;\r\n  this.y = y;\r\n}\r\n\r\nfunction numberToClass(num) {\r\n  if (num === 0) {\r\n    return 'zero';\r\n  } else if (num === 1) {\r\n    return 'one';\r\n  } else if (num === 2) {\r\n    return 'two';\r\n  } else if (num === 3) {\r\n    return 'three';\r\n  } else if (num === 4) {\r\n    return 'four';\r\n  } else if (num === 5) {\r\n    return 'five';\r\n  } else if (num === 6) {\r\n    return 'six';\r\n  } else if (num === 7) {\r\n    return 'seven';\r\n  } else if (num === 8) {\r\n    return 'eight';\r\n  }\r\n}\r\n\r\nfunction flag(coord, flags, revealed) {\r\n  if (containsCoordinate(coord, revealed)) {\r\n    return flags.slice();\r\n  }\r\n\r\n  if (containsCoordinate(coord, flags)) {\r\n    return flags.filter(flag => !(coordEq(flag, coord)));\r\n  } else {  \r\n    return flags.concat([coord]);\r\n  }\r\n}\r\n\r\nfunction inclusiveReveal(width, height, coord, flags, mines, revealed) {\r\n  return revealed.concat(exclusiveReveal(width, height, coord, flags, mines, revealed));\r\n}\r\n\r\nfunction exclusiveReveal(width, height, coord, flags, mines, revealed) {\r\n  const newlyRevealed = [];\r\n  // Reveal only unflagged and unrevealed tiles\r\n  if (!containsCoordinate(coord, revealed) && !containsCoordinate(coord, flags)) {\r\n    newlyRevealed.push(coord);\r\n    if (adjacentIn(width, height, coord, mines).length === 0 && !containsCoordinate(coord, mines)) {\r\n      for (const cell of adjacentCells(width, height, coord)) {\r\n\tconst revealedSoFar = revealed.concat(newlyRevealed);\r\n\tconst deepReveal = exclusiveReveal(width, height, cell, flags, mines, revealedSoFar);\r\n\tArray.prototype.push.apply(newlyRevealed, deepReveal);\r\n      }\r\n    }\r\n  }\r\n  return newlyRevealed;\r\n}\r\n\r\nfunction chord(width, height, coord, flags, mines, revealed) {\r\n  const adjacentFlags = adjacentIn(width, height, coord, flags);\r\n  const adjacentMines = adjacentIn(width, height, coord, mines);\r\n  if (containsCoordinate(coord, revealed) &&\r\n      adjacentFlags.length >= adjacentMines.length) {\r\n    const adjacents = adjacentCells(width, height, coord);\r\n    return adjacents.reduce(\r\n      (acc, cur) => acc.concat(exclusiveReveal(width, height, cur, flags, mines, acc)),\r\n      revealed\r\n    );\r\n  }\r\n  return revealed.slice();\r\n}\r\n\r\nexport default Minesweeper;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Minesweeper from './Minesweeper';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Minesweeper width={30} height={16} bombCount={99} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}